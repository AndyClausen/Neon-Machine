local args={...}
if #args ~= 1 then
	error( 'Usage: edit <filename>', 0 )
end

local tabSize = "   "
local lines={''}
local path = shell.getCurrentDir()..args[1]

if fs.exists( path ) then
	local file=fs.open( path, 'r' )
	local ln = 1
	for line in file:lines() do
		lines[ln]=line
		ln=ln+1
	end
	file:close()
end

local mouseImg = gfx.loadImage( 'rom/mouse.img' )

local cursorX = 0
local currLine = 1
local showLines = 1
sys.setKeyRepeat( true )

local GREEN = { 2, 10, 2 }
local DARKER = { 8, 8, 8 }
local DARK = { 2, 2, 2 }

local sec = 0
local col = 15
local updateCursor = false
local updateCursorCol = 0
local transX = 0
local function drawCursor( offset, y )
	local num = transX+(offset+cursorX)
	local s = os.date("%S")
	if s ~= sec or updateCursor then
		sec = s
		if updateCursor == true then
			col = 15
		else
			if col == 15 then
				col = 0
			else
				col = 15
			end
		end
	end
	gfx.drawLine( num, y+5, num+2, y+5, { col, col, col } )
end

local function calc( a )
	local b = 0
	while b < a do
		b = b + 4
		if b == a then
			return a
		end
	end
	return b - 4
end

local bottom = false
local timer = 0
local savedStr = ""
local currSelected = 1
local options = {
	[1]=function()
		shell.clearScreen()
		sys.textInput = ''
		error()
	end;
	[2]=function()
		local file=fs.open( path, 'w' )
		for i=1, #lines do
			file:write( lines[i]..'\n' )
		end
		file:close()
		savedStr = "Saved."
		timer = 60*4
		sys.textInput = ''
		bottom = false
	end;
	[3]=function()
		local file=fs.open( path.."_temp", 'w' )
		for i=1, #lines do
			file:write( lines[i]..'\n' )
		end
		file:close()
		savedStr = "Runned."
		shell.run( path.."_temp" )
		fs.delete( path.."_temp" )
	end;
}

local currIndent = "LUA"
local CKEYWORD = {12,1,8}
local CNUMBER = {8,2,13}
local CDATA = {8,2,13}
local CCOMMENT = {6,6,5}
local CSTRING = {15,13,0}
local CTEXT = {14,14,14}
local COTHER = {12,1,8}
local CFUNC = {0,7,13}
local COBJ = {0,9,14}
local CLUASTRCONCAT = {12,1,8}
local CLUAARGS = {8,2,13}

local KEYWORDS = {
	[ "LUA" ] = {
		-- Keywords
		[ "local" ] = CKEYWORD;
		[ "while" ] = CKEYWORD;
		[ "for" ] = CKEYWORD;
		[ "if" ] = CKEYWORD;
		[ "do" ] = CKEYWORD;
		[ "then" ] = CKEYWORD;    
		[ "else" ] = CKEYWORD;
		[ "elseif" ] = CKEYWORD;
		[ "end" ] = CKEYWORD;
		[ "in" ] = CKEYWORD;
		[ "until" ] = CKEYWORD;
		[ "repeat" ] = CKEYWORD;
		[ "return" ] = CKEYWORD;
		[ "function" ] = CKEYWORD;
		[ "break" ] = CKEYWORD;

		-- Logic
		[ "and" ] = CKEYWORD;
		[ "or" ] = CKEYWORD;
		[ "not" ] = CKEYWORD;

		
		-- Data structures
		[ "true" ] = CDATA;
		[ "false" ] = CDATA;
		[ "nil" ] = CDATA;

	}
}

local prnt = gfx.print
local prnta = gfx.printAlpha
local mtch = string.match
local function tryWrite( x, y, sLine, regex, clr, minusOne, alpha )
	local match = mtch( sLine, regex )
	local oldmatch = match
	if match then
		if minusOne == true then
			match = match:sub( 1, #match-1 )
			oldmatch = oldmatch:sub( 1, #oldmatch-1 )
		end
		if #match > 50 then
			match = match:sub( 1, 50 )
		end
		if alpha == true then
			if type( clr ) == "function" then
				clr = clr( match )
				clr[4] = 7
				prnta( match, x, y, clr )
			else
				clr[4] = 7
				prnta( match, x, y, clr )
			end
		else
			if type( clr ) == "function" then
				prnt( match, x, y, clr( match ) )
			else
				prnt( match, x, y, clr )
			end
		end
		return {sLine:sub( #oldmatch + 1 ), x+(#oldmatch*4)}
	end
	return nil
end

local function writeHighlighted( x, y, sLine, alpha )
	while #sLine > 0 do
		local tbl = 
			tryWrite( x, y, sLine, "^%-%-%[%[.-%]%]", CCOMMENT, nil, alpha ) or
			tryWrite( x, y, sLine, "^%-%-.*", CCOMMENT, nil, alpha ) or
			tryWrite( x, y, sLine, "^\"\"", CSTRING, nil, alpha ) or
			tryWrite( x, y, sLine, "^\".-[^\\]\"", CSTRING, nil, alpha ) or
			tryWrite( x, y, sLine, "^\'\'", CSTRING, nil, alpha ) or
			tryWrite( x, y, sLine, "^\'.-[^\\]\'", CSTRING, nil, alpha ) or
			tryWrite( x, y, sLine, "^%[%[.-%]%]", CSTRING, nil, alpha ) or
			tryWrite( x, y, sLine, "^%d+", CNUMBER, nil, alpha ) or
			tryWrite( x, y, sLine, "^[%+%-%*/%%%^%#%=%<%>%~]+", COTHER, nil, alpha ) or
			tryWrite( x, y, sLine, "^(%.%.%.(%.+))", CTEXT, nil, alpha ) or
			tryWrite( x, y, sLine, "^(%.%.%.)", CLUAARGS, nil, alpha ) or
			tryWrite( x, y, sLine, "^(%.%.)", CLUASTRCONCAT, nil, alpha ) or
			tryWrite( x, y, sLine, "^[%w_]+%(", function( match )
				local curr = KEYWORDS[ currIndent ]
				if curr[ match ] then
					return curr[ match ]
				end
				return CFUNC
			end, true, alpha ) or
			tryWrite( x, y, sLine, "^[%w_]+%.", COBJ, true, alpha ) or
			tryWrite( x, y, sLine, "^[%w_]+%:", COBJ, true, alpha ) or
			tryWrite( x, y, sLine, "^[%w_]+", function( match )
				local curr = KEYWORDS[ currIndent ]
				if curr[ match ] then
					return curr[ match ]
				end
				return CTEXT
			end, nil, alpha ) or
			tryWrite( x, y, sLine, "^[^%w_]", CTEXT, nil, alpha )
		if tbl then
			sLine = tbl[ 1 ]
			x = tbl[ 2 ] or x
		end
	end
end

local floor = math.floor
local flrct = gfx.drawFillRect
local one4 = 1/4
local one10 = 1/10
local clrscr = gfx.clear
local coye = coroutine.yield
local gemou = sys.getMousePos
local drwln = gfx.drawLine
local currMaxX = 0
cursorX = 0
while true do
	coye()
	local mx, my = gemou()
	clrscr()
	local currX = (#(tostring(#lines))-1)*4
	local lastInput=lines[currLine]
	flrct( 0, gfx.height-7, gfx.width-1, 7 )
	local h = font.getHeight()+1
	for i=showLines, 23+showLines do
		if lines[ i ] then
			local y=(i-showLines)*h
			if i==23+showLines then
				prnt( i, 0, y, {7,7,7} )
				writeHighlighted( transX+(8+currX), y, lines[i], true )
			else
				prnt( i, 0, y )
				writeHighlighted( transX+(8+currX), y, lines[i] )
			end
		end
	end
	drwln( 5+currX, 0, 5+currX, gfx.height )
	if sys.keyPressed( 'lctrl' ) then
		bottom = not bottom
	end
	if bottom == false then
		if sys.mousePressed( 1 ) then
			local tx = mx-8-currX
			currLine = math.round((my/6)+.5)+(showLines-1)
			if currLine > #lines then
				currLine = #lines
			elseif currLine <= 0 then
				currLine = 1
			end
			lastInput=lines[currLine]
			sys.textInput = lastInput
			if tx >= 0 and tx < #lastInput*4 then
				cursorX = calc( tx )
			elseif tx >= #lastInput*4 then
				cursorX = #lastInput*4
			end
			currMaxX = cursorX
			updateCursor = true
		elseif sys.mousePressed( "wu" ) then
			if showLines > 1 then
				showLines = showLines - 1
			end
		elseif sys.mousePressed( "wd" ) then
			if showLines <= #lines-23 then
				showLines = showLines + 1
			end
		end

		if sys.keyPressed( "up" ) then
			if currLine > 1 then
				currLine = currLine - 1
				if currMaxX > #lines[currLine]*4 then
					cursorX = #lines[currLine]*4
					lastInput = lines[currLine]
					sys.textInput = lines[currLine]
				else
					cursorX = currMaxX
					lastInput = lines[currLine]
					sys.textInput = lines[currLine]
				end
				if currLine < showLines then
					showLines = showLines - 1
				end
				updateCursor = true
			end
		elseif sys.keyPressed( "down" ) then
			if currLine < #lines then
				currLine = currLine + 1
				if currMaxX > #lines[currLine]*4 then
					cursorX = #lines[currLine]*4
					lastInput = lines[currLine]
					sys.textInput = lines[currLine]
				else
					cursorX = currMaxX
					lastInput = lines[currLine]
					sys.textInput = lines[currLine]
				end
				if currLine > showLines+22 then
					showLines = showLines + 1
				end
				updateCursor = true
			end
		elseif sys.keyPressed( "left" ) then
			if cursorX > 1 then
				cursorX = cursorX - 4
				currMaxX = cursorX
				updateCursor = true
			else
				if currLine > 1 then
					currLine = currLine - 1
					sys.textInput = lines[currLine]
					cursorX = #sys.textInput*4
					currMaxX = cursorX
					if currLine < showLines then
						showLines = showLines - 1
					end
					updateCursor = true
				end
			end
		elseif sys.keyPressed( "right" ) then
			if cursorX < #lastInput*4 then
				cursorX = cursorX + 4
				currMaxX = cursorX
				updateCursor = true
				if (8+cursorX)+transX >= gfx.width then
					transX = transX - 4
				end
			else
				if currLine < #lines then
					currLine = currLine + 1
					sys.textInput = lines[currLine]
					cursorX = 0
					currMaxX = 0
					if currLine > showLines+22 then
						showLines = showLines + 1
						transX = 0
					end
					updateCursor = true
				end
			end
		elseif sys.keyPressed( "return" ) then
			local cx = floor(cursorX*one4)
			local half = lines[currLine]:sub( cx+1, #lines[currLine] )
			lines[currLine]=lines[currLine]:sub(1, cx)
			currLine = currLine + 1
			table.insert( lines, currLine, half )
			sys.textInput = half
			lastInput = half
			cursorX = 0
		elseif sys.keyPressed( "backspace" ) then
			local cx = floor(cursorX*one4)
			if cx >= 1 then
				local left = lastInput:sub( 1, cx-1 )
				local right = lastInput:sub( cx+1 )
				sys.textInput = left..right
				cursorX = cursorX - 4
				lines[currLine]=sys.textInput
				updateCursor = true
			else
				if #lines > 1 then
					if currLine > 1 then
						updateCursor = true
						local tmp = lines[ currLine ]
						currLine = currLine - 1
						table.remove( lines, currLine + 1 )
						local x = (#lines[ currLine ] * 4)
						if x <= 0 then
							cursorX = 0
						else
							cursorX = x
						end
						lines[ currLine ] = lines[ currLine ]..tmp
						sys.textInput = lines[ currLine ]
						lastInput = lines[ currLine ]
					end
				end
			end
		elseif sys.keyPressed( "tab" ) then
			sys.textInput = sys.textInput .. "\t"
		else
			if lines[currLine] ~= sys.textInput then
				local cx = floor(cursorX*one4)
				local len = #sys.textInput
				local left = lastInput:sub( 0, cx )..sys.textInput:sub( len, len )
				local right = lastInput:sub( cx+1 )
				sys.textInput = left..right
				lines[currLine] = sys.textInput
				cursorX = cursorX + 4
			end
		end
		drawCursor( currX+8, ((currLine-(showLines-1))*h)-h )
		updateCursor = false
	else
		if sys.keyPressed( 'return' ) then
			options[ currSelected ]()
		elseif sys.keyPressed( 'left' ) then
			currSelected = currSelected - 1
			if currSelected < 1 then
				currSelected = #options
			end
		elseif sys.keyPressed( 'right' ) then
			currSelected = currSelected + 1
			if currSelected > #options then
				currSelected = 1
			end
		end
		if sys.mousePressed( 1 ) then
			options[currSelected]()
		end	
		local highlightClose = (currSelected == 1) and true or false
		local highlightSave = (currSelected == 2) and true or false
		local highlightRun = (currSelected == 3) and true or false
		if mx >= 5 and mx < 25 then
			currSelected = 1
			highlightClose = true
		end
		if mx >= 33 and mx < 49 then
			currSelected = 2
			highlightSave = true
		end
		if highlightSave == true then
			gfx.print( "[SAVE]", 29, gfx.height-6, DARKER )
		else
			gfx.print( "SAVE", 33, gfx.height-6, DARK )
		end
		if highlightRun == true then
			gfx.print( "[RUN]", 53, gfx.height-6, DARKER )
		else
			gfx.print( "RUN", 57, gfx.height-6, DARK )
		end
		if highlightClose == true then
			gfx.print( "[CLOSE]", 1, gfx.height-6, DARKER )
		else
			gfx.print( "CLOSE", 5, gfx.height-6, DARK )
		end
	end
	gfx.print( savedStr, gfx.width-(#savedStr*4)-1, gfx.height-6, DARK )
	gfx.drawImage( mouseImg, mx, my )
	timer = timer - 1
	if timer < 0 then timer = 0 savedStr = path end
end